{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\ud83d\udcd3 Welcome This is the style guide we use at Ritza to produce technical tutorials, documentation, blog articles, and documentation. It's free and open source, so feel free to use it or steal it and adapt it to your own needs.","title":"\ud83d\udcd3 Welcome"},{"location":"#welcome","text":"This is the style guide we use at Ritza to produce technical tutorials, documentation, blog articles, and documentation. It's free and open source, so feel free to use it or steal it and adapt it to your own needs.","title":"\ud83d\udcd3 Welcome"},{"location":"grammar/grammar/","text":"Grammar Our choice of which English to use depends on each client\u2019s preference and house style. In the absence of a specified preference, default to American English. Abbreviations, initialisms and acronyms Don\u2019t spell out common shortenings, like API or HTML. Shortenings written in all caps take no points (API not A.P.I.) and are followed by a lowercase \u2018s\u2019 in plurals (APIs not API\u2019s). Only use an apostrophe to indicate possession: \u2705 Check the API\u2019s documentation. If there\u2019s a chance your reader won\u2019t be familiar with an acronym or initialism, spell it out the first time followed by the short version in brackets: \u2705 Coordinated Universal Time (UTC) Use the abbreviations \u201ci.e.\u201d, \u201ce.g.\u201d and \u201cetc.\u201d sparingly, but format them as written here if you do. If you\u2019re unsure of the proper use of these shortenings, try using their definitions in their place to see if your sentence makes sense: i.e. \u201cthat is\u201d e.g. \u201cfor example\u201d etc. \u201cand other things\u201d Apostrophe Don\u2019t use an apostrophe to indicate plural forms. Use an apostrophe to indicate missing letters (can\u2019t is a contraction of cannot) or possession (Acme\u2019s tool). Possessive pronouns don\u2019t take an apostrophe: hers, his, its, ours, theirs and yours. Backticks Place inline code between backticks. Use backticks to reference bits of code you\u2019re narrating, but not for labels or button text. \u274c Enter the filename and click OK . \u2705 Import the built-in node http package. Capitalization Use sentence capitalization for titles and headings rather than title capitalization, unless the client expresses a preference for title capitalization. If you\u2019re unsure, check the client\u2019s style guide (if they have one) or match formatting to their existing documentation. \u2705 Using multiplayer with anonymous users Title capitalization: Capitalize the first word of the title and all nouns, verbs, adjectives and adverbs. Don\u2019t capitalize articles (a, the), prepositions (on, over), and conjunctions (and, but). \u2705 Setting up Stripe Checkout and Email Subscription with Flask and Code Capsules Some company names use irregular capitalization rules. We\u2019ve compiled a list of common examples here, but you should check the company\u2019s website to confirm their preferred formatting if there\u2019s any doubt. If a business\u2019s website doesn\u2019t clear up how to capitalize their brand name, follow Wikipedia\u2019s usage. Capitalize the names of websites and web publications. Don\u2019t italicize. Commas Use a serial comma in lists: \u2705 We shouldn't store passwords, access keys, personal information, or anything else sensitive in publicly accessible files. Avoid comma splices: A comma splice occurs when two independent clauses are joined with a comma: \u274c Download the files you need, unzip them on your computer. A clause is independent if it can stand alone as a complete sentence. Correct comma splices by rewriting the independent clauses as complete sentences: \u2705 Download the files you need. Unzip them on your computer. Alternatively, add a conjunction: \u2705 Download the files you need, and unzip them on your computer. Comma splices can be corrected by replacing the comma with a semicolon, but this approach is not recommended for our content: \u2705 Download the files you need; unzip them on your computer. Contractions Use common contractions (we\u2019ll, let\u2019s, can\u2019t) to make your tone friendly and informal, but avoid less common contractions (d\u2019ya know \u2019em?). File extensions Use uppercase when referring to a file type, add a lowercase s without an apostrophe for plurals: \u2705 PNG \u2705 PDFs Specific file names should be in lowercase: * \u2705 tictactoe.png Formatting Avoid using italics for emphasis. Avoid numbered lists. Fractions and decimals Spell out and hyphenate fractions: two-thirds (not 2/3 or two thirds). Use decimal points when a number is not easily written out as a fraction: 1.273. Numbers Spell out a number when it starts a sentence, otherwise use numerals: \u2705 Nine elements make up the array. \u2705 The array has 9 elements. Some common expressions work best with numbers spelled out: \u2705 Back to square one. \u2705 An all-in-one solution. Ordinals should mostly be avoided, but spelled out when used: \u2705 Third-party \u2705 First impression Numbers over three digits get commas \u2705 999 \u2705 1,000 \u2705 3,500,000 Percent Use the % symbol instead of spelling out \u201cpercent\u201d. Pronouns Use they, their and them in the singular if the subject\u2019s gender is unknown or irrelevant: \u2705 Send your collaborator the join link and they'll be redirected to the sign in page. Never use the pronoun \u201cone\u201d. Refer to a company or product as \u201cit\u201d (not \u201cthey\u201d or \u201cthem\u201d): \u2705 Replit is an online IDE. It has various collaborative features. Quotation marks Use double quotation marks to identify labels or button text: Click \u201cOK\u201d to complete setup URLs and websites Avoid spelling out URLs, but when you need to, leave off the http://www.","title":"Grammar"},{"location":"grammar/grammar/#grammar","text":"Our choice of which English to use depends on each client\u2019s preference and house style. In the absence of a specified preference, default to American English. Abbreviations, initialisms and acronyms Don\u2019t spell out common shortenings, like API or HTML. Shortenings written in all caps take no points (API not A.P.I.) and are followed by a lowercase \u2018s\u2019 in plurals (APIs not API\u2019s). Only use an apostrophe to indicate possession: \u2705 Check the API\u2019s documentation. If there\u2019s a chance your reader won\u2019t be familiar with an acronym or initialism, spell it out the first time followed by the short version in brackets: \u2705 Coordinated Universal Time (UTC) Use the abbreviations \u201ci.e.\u201d, \u201ce.g.\u201d and \u201cetc.\u201d sparingly, but format them as written here if you do. If you\u2019re unsure of the proper use of these shortenings, try using their definitions in their place to see if your sentence makes sense: i.e. \u201cthat is\u201d e.g. \u201cfor example\u201d etc. \u201cand other things\u201d Apostrophe Don\u2019t use an apostrophe to indicate plural forms. Use an apostrophe to indicate missing letters (can\u2019t is a contraction of cannot) or possession (Acme\u2019s tool). Possessive pronouns don\u2019t take an apostrophe: hers, his, its, ours, theirs and yours. Backticks Place inline code between backticks. Use backticks to reference bits of code you\u2019re narrating, but not for labels or button text. \u274c Enter the filename and click OK . \u2705 Import the built-in node http package. Capitalization Use sentence capitalization for titles and headings rather than title capitalization, unless the client expresses a preference for title capitalization. If you\u2019re unsure, check the client\u2019s style guide (if they have one) or match formatting to their existing documentation. \u2705 Using multiplayer with anonymous users Title capitalization: Capitalize the first word of the title and all nouns, verbs, adjectives and adverbs. Don\u2019t capitalize articles (a, the), prepositions (on, over), and conjunctions (and, but). \u2705 Setting up Stripe Checkout and Email Subscription with Flask and Code Capsules Some company names use irregular capitalization rules. We\u2019ve compiled a list of common examples here, but you should check the company\u2019s website to confirm their preferred formatting if there\u2019s any doubt. If a business\u2019s website doesn\u2019t clear up how to capitalize their brand name, follow Wikipedia\u2019s usage. Capitalize the names of websites and web publications. Don\u2019t italicize. Commas Use a serial comma in lists: \u2705 We shouldn't store passwords, access keys, personal information, or anything else sensitive in publicly accessible files. Avoid comma splices: A comma splice occurs when two independent clauses are joined with a comma: \u274c Download the files you need, unzip them on your computer. A clause is independent if it can stand alone as a complete sentence. Correct comma splices by rewriting the independent clauses as complete sentences: \u2705 Download the files you need. Unzip them on your computer. Alternatively, add a conjunction: \u2705 Download the files you need, and unzip them on your computer. Comma splices can be corrected by replacing the comma with a semicolon, but this approach is not recommended for our content: \u2705 Download the files you need; unzip them on your computer. Contractions Use common contractions (we\u2019ll, let\u2019s, can\u2019t) to make your tone friendly and informal, but avoid less common contractions (d\u2019ya know \u2019em?). File extensions Use uppercase when referring to a file type, add a lowercase s without an apostrophe for plurals: \u2705 PNG \u2705 PDFs Specific file names should be in lowercase: * \u2705 tictactoe.png Formatting Avoid using italics for emphasis. Avoid numbered lists. Fractions and decimals Spell out and hyphenate fractions: two-thirds (not 2/3 or two thirds). Use decimal points when a number is not easily written out as a fraction: 1.273. Numbers Spell out a number when it starts a sentence, otherwise use numerals: \u2705 Nine elements make up the array. \u2705 The array has 9 elements. Some common expressions work best with numbers spelled out: \u2705 Back to square one. \u2705 An all-in-one solution. Ordinals should mostly be avoided, but spelled out when used: \u2705 Third-party \u2705 First impression Numbers over three digits get commas \u2705 999 \u2705 1,000 \u2705 3,500,000 Percent Use the % symbol instead of spelling out \u201cpercent\u201d. Pronouns Use they, their and them in the singular if the subject\u2019s gender is unknown or irrelevant: \u2705 Send your collaborator the join link and they'll be redirected to the sign in page. Never use the pronoun \u201cone\u201d. Refer to a company or product as \u201cit\u201d (not \u201cthey\u201d or \u201cthem\u201d): \u2705 Replit is an online IDE. It has various collaborative features. Quotation marks Use double quotation marks to identify labels or button text: Click \u201cOK\u201d to complete setup URLs and websites Avoid spelling out URLs, but when you need to, leave off the http://www.","title":"Grammar"},{"location":"improving-your-writing/how-do-I-become-a-good-writer/","text":"How do I become a good writer? Many people ask us how to become a writer. Here's an opinionated guide. Year 1: write (yes, there are no shortcuts unfortunately). The best resource is docs.new or other text editor of your choice. Write. Preferably at least one million words. Some resources can help though (as long as you are writing too. The best is to read and write. If you don't have time, rather just write. Resources Watch The Craft of Writing Effectively by Larry McEnerney Read On Writing Well: The Classic Guide to Writing Nonfiction by William Zinsser Read On Writing: A Memoir of the Craft by Stephen King Many people try to learn something without doing it - by watching others, reading guides, buying courses. If you want to ignore one section in this document, ignore this one and take note only of the previous one. That said, if you're actively practicing, getting some advice from people who have actively practiced even more can be useful.","title":"How do I become a good writer?"},{"location":"improving-your-writing/how-do-I-become-a-good-writer/#how-do-i-become-a-good-writer","text":"Many people ask us how to become a writer. Here's an opinionated guide.","title":"How do I become a good writer?"},{"location":"improving-your-writing/how-do-I-become-a-good-writer/#year-1-write-yes-there-are-no-shortcuts-unfortunately","text":"The best resource is docs.new or other text editor of your choice. Write. Preferably at least one million words. Some resources can help though (as long as you are writing too. The best is to read and write. If you don't have time, rather just write.","title":"Year 1: write (yes, there are no shortcuts unfortunately)."},{"location":"improving-your-writing/how-do-I-become-a-good-writer/#resources","text":"Watch The Craft of Writing Effectively by Larry McEnerney Read On Writing Well: The Classic Guide to Writing Nonfiction by William Zinsser Read On Writing: A Memoir of the Craft by Stephen King Many people try to learn something without doing it - by watching others, reading guides, buying courses. If you want to ignore one section in this document, ignore this one and take note only of the previous one. That said, if you're actively practicing, getting some advice from people who have actively practiced even more can be useful.","title":"Resources"},{"location":"reference/brandnames/","text":"Brandnames Bitbucket (not bitbucket, BitBucket, bit bucket, Bit Bucket) Code Capsules (not codecapsules, CodeCapsules, code capsules) D3.js (Not D3.JS, D3JS, D3js, D3) dateutil (not Dateutil) DigitalOcean (not Digital Ocean) Express (not express, express.js, Express.js) feedparser (not Feedparser) GitHub (not Github, Git Hub, github, git hub) Hashnode (not HashNode, Hash node, hashnode, hash node) JavaScript (not Javascript, Java Script, java script, javascript) Label Studio (not labelstudio, LabelStudio, LabelStud.io, label studio) LaTeX (not Latex, latex, LATEX) macOS (not macos, MacOS, Mac OS - previously OS X) NGINX (not nginx, Nginx, NginX) NixOS, Nix, Nix language (not nix) Node.js (not NodeJS, node, Nodejs, Node.JS) OAuth 2.0 (not oAuth2.0) oEmbed (not OEmbed, oembed) pandas (not Pandas), unless at the start of a sentence pip (not PIP or Pip) PyPI (not pypi, Pypi, PyPi) Replit (not repl.it, Repl.it, replit) scikit-learn (not Scikit-Learn, SciKit, scikitlearn) Socket.IO (not Socket.io, socket.io, Socket) Sourcegraph (not Source Graph, SourceGraph) spaCy (not SpaCy, Spacy, spacy) TensorFlow (not tensorflow, Tensorflow, Tensor Flow, tensor flow) TypeScript (not Typescript, typescript, Type Script) Webflow (not Web Flow, WebFlow, webflow, web flow) WebSocket (not websocket, web socket, Websocket, Web Socket, WebSockets)","title":"Brandnames"},{"location":"reference/brandnames/#brandnames","text":"Bitbucket (not bitbucket, BitBucket, bit bucket, Bit Bucket) Code Capsules (not codecapsules, CodeCapsules, code capsules) D3.js (Not D3.JS, D3JS, D3js, D3) dateutil (not Dateutil) DigitalOcean (not Digital Ocean) Express (not express, express.js, Express.js) feedparser (not Feedparser) GitHub (not Github, Git Hub, github, git hub) Hashnode (not HashNode, Hash node, hashnode, hash node) JavaScript (not Javascript, Java Script, java script, javascript) Label Studio (not labelstudio, LabelStudio, LabelStud.io, label studio) LaTeX (not Latex, latex, LATEX) macOS (not macos, MacOS, Mac OS - previously OS X) NGINX (not nginx, Nginx, NginX) NixOS, Nix, Nix language (not nix) Node.js (not NodeJS, node, Nodejs, Node.JS) OAuth 2.0 (not oAuth2.0) oEmbed (not OEmbed, oembed) pandas (not Pandas), unless at the start of a sentence pip (not PIP or Pip) PyPI (not pypi, Pypi, PyPi) Replit (not repl.it, Repl.it, replit) scikit-learn (not Scikit-Learn, SciKit, scikitlearn) Socket.IO (not Socket.io, socket.io, Socket) Sourcegraph (not Source Graph, SourceGraph) spaCy (not SpaCy, Spacy, spacy) TensorFlow (not tensorflow, Tensorflow, Tensor Flow, tensor flow) TypeScript (not Typescript, typescript, Type Script) Webflow (not Web Flow, WebFlow, webflow, web flow) WebSocket (not websocket, web socket, Websocket, Web Socket, WebSockets)","title":"Brandnames"},{"location":"ritza%27s-writing-rules/Style/","text":"\ud83d\udcdd Welcome to the Ritza style guide This is our opinionated style guide, developed to help you produce work that is valuable and easy to understand. Goals and principles Our goal is always to teach . This often means helping our readers understand complicated technology, either conceptually or by example. Give your reader the exact information they need and include opportunities for them to learn more. To achieve our goal, our content is: Clear. Be sure you know what you\u2019re writing about. Keep words and sentences as simple as possible. Useful. Does the content deliver on the promise your headline made? Have you provided all the information the reader will need? Friendly. Don\u2019t underestimate or patronize your reader. Use informal language. Voice and tone Voice and tone is not about what we say, but how we say it. We aim to be consistent, functional and clear. Here are some tips for how to achieve this: Point of view Default to first person plural to include the reader in your \u201cteam\u201d. This means you and the reader are doing something together: \u2705 \"Next, we'll install the widget factory to create widgets efficiently.\" Sometimes it's more efficient to use the second person imperative and \"instruct\" the reader by telling them what needs to be done. This can be harsher but it's often less wordy, so use your judgement: \u26a0\ufe0f \"We can do this by using our package manager. We'll achieve this by typing sudo apt-install widget-factory \" \u2705 \"We can do this by using our package manager. Type sudo apt-install widget-factory \" It's ok to refer to the reader as 'you' in some cases, where the writer is clearly not involved, but in general, default to the 'we' voice wherever possible: \u26a0\ufe0f \"As you might remember from the previous tutorial , widget factories create widgets. In this tutorial...\" \u2705 \"In the previous tutorial, we saw how widget factories create widgets. In this tutorial...\" Voice Default to active voice . This isn\u2019t a hard-and-fast rule. Active voice often makes it clearer who is doing what and sounds less stuffy. That said, sometimes passive is simply cleaner (often in cases where there isn't a specific subject) - use your judgement. \u26a0\ufe0f The command will be run by the shell. \u2705 Use the shell to run any commands. Things to avoid Avoid giving the reader too many options Often, there are many ways to achieve the same task. Avoid giving the reader options wherever possible - the reader is looking to you for guidance, so be opinionated instead of comprehensive . \u274c \"You can use either the CLI or the GUI. If you prefer the CLI, then type the following command. If you prefer the GUI then click Foo -> Bar. \u2705 \"We recommend using the CLI. Type the following command\" If you really need to show multiple ways of achieiving the same thing, still emphasise the recommended one more than the other (e.g. include the alternative in a footnote or parentheses). It is OK to have a personal preference. Avoid getting in the reader\u2019s way: \u274c \"I wrote this guide after encountering difficulties with the software myself\" \u274c \"Next, I'm going to show you how to install a widget factory\" Avoid 'marketing' speak. Never try to sell something to the reader. Don't say a product makes things easy, that a design is beautiful, or use any text that you might find on a SaaS landing page. Avoid anything you might find in an encyclopaedia or academic paper. Your reader isn't interested in definitions - or if they are, they can easily find these elsewhere. If you're writing an article on NER, instead of starting with \u274c \"Named Entity Recognition (NER) is the task of categorising key words in a text as specific entities.\" Consider something more like \u2705 \"If you're analyzing a large amount of text, it's often useful to extract named entities from this - identifying people, places, dates and other entities.\" If you've ever tried to learn a new concept, you probably already know that reading a definition doesn't really clarify - but a more specific example does. Avoid assuming knowledge. This can be tricky because, of course, you always have to assume some level of knowledge when writing technical content. However, we try to avoid assumptions about our reader's skill level. \u274c \"Referring back to the server code, it's obvious that we need both a success.html and a cancel.html.\" \u2705 \"Referring back to the server code, you may notice it requires both a success.html and a cancel.html.\" Avoid guessing out loud what the reader wants. It's tempting to start an article with \"Are you are a foo who likes to bar but sometimes finds baz?\", but this approach defines a narrow audience and you risk alienating anyone who is not a part of it. Avoid giving extraneous context. It's tempting to give the reader related context or information, but your reader is here to achieve a specific goal. Leave out anything that doesn\u2019t help them achieve it. Instead of: \u274c Label Studio is an open source data labeling tool for labeling and exploring multiple types of data. Label Studio can be integrated with machine learning models to supply predictions for labels (pre-labels), or perform continuous active learning. You can use Label Studio for a variety of labelling and classification tasks for many different data formats but again we will just be focusing on its NER capabilities. Try something more concise: \u2705 We can use Label Studio for manually tagging Named Entities in our dataset. Install it now with pip install label-studio if you haven't already. Avoid telling the reader that something is obvious or easy. This discourages the reader who doesn\u2019t find it obvious or easy, and adds no value to the reader who does. Mostly, ~it's simple~ . You can ~easily~ ~just~ remove the offending words and the sentence keeps its meaning: \u274c Obviously, you can terminate the program at any time by hitting Ctrl+C \u2705 You can terminate the program at any time by hitting Ctrl+C Sometimes, you need to reword to avoid implying that something is simple: \u274c It's easy to add new widgets using Acme's tool. Click menu -> add widget . \u2705 To add a new widget using Acme's tool, click menu -> add widget . Structure The structure of your article helps to present information in the clearest way. Here are some things to keep in mind regarding structure: Keep structures as flat as possible. Use heading 1 ( # in Markdown) for the title and heading 2 ( ## ) to break things down into logical sections. Heading 3 ( ### ) can be used where necessary for sub-sections, but in general, having a deeply nested structure makes things harder to follow, harder to edit, and harder to reuse. As a writer, your job is to take a complicated graph of interconnected ideas and break them down into a linear structure that can be read from start to end. Always have content between headings Don't have a subheading immediately below a heading without any text in between. Rather add a short sentence to introduce the section, or try to restructure to use fewer headings (also, don't use this as an excuse to add 'fluff' text that adds no value to the article). Avoid nested bullets. Don't nest bullets into several levels. Rather restructure the content so that you can use separate bullet lists: \u274c You have several options for adding widgets From the menu by clicking on file -> add widget by clicking on help searching for add widget and hitting enter With a keyboard shortcut by pressing a and then w in command mode by pressing ctrl + a \u2705 You can add widgets from the menu by clicking on file -> add widget by clicking on help searching for add widget and hitting enter or with a keyboard shortcut by pressing a and then w in command mode by pressing ctrl + a Link as much context as is useful. Choosing what text to link to an additional resource is more an art than a science. The main rule is that it should be as clear as possible to the reader what is being linked to, but keep it simple. \u274c \" You can follow the widget guide to learn more\" \u274c \"You can follow the widget guide to learn more\" \u2705 \"You can follow the widget guide to learn more\" The first example links too much unnecessary wording. In the second example, the link could be to a Wikipedia article explaining what a guide is. The third makes it clear that it is a link to the guide that was mentioned. Include user-friendly code samples. We want to tell the reader exactly what code needs to go where , and make it easy to repeat what we are doing. Avoid screenshots of code, and rather present code samples in text, between backtick gates with a language description. Avoid long code snippets. Instead of giving an entire file to copy-paste, break down the code into several steps if possible. Provide a file, if you must. If there's a lot of \u2018boilerplate\u2019 code, consider providing the file in a repl and instruct the reader to copy the whole thing as a starting point. However, it's preferable to avoid this if you can. Annotate screenshots and use context. Screenshots are helpful tools for tutorials, but using them too often or without clarity may just make it harder for the reader to follow your instructions. \u2705 Use contextual screenshots to help readers navigate whichever platform you are directing them to. \u2705 Use a screenshot to demonstrate what your reader should be seeing if they correctly followed your instructions. \u2705 Make use of [1], [2], [3] annotations if several things need to be shown from a single shot. \u2705 Preferably take screenshots using a 4k/retina screen, or consider using a virtual high-res screen through Chrome dev tools as an alternative. \u2705 For Mac, use CleanShotX if possible \u274c Avoid screenshots of large amounts of text. Rather use a caption if you need to present text to your reader. \u274c Avoid screenshots that show too little; for example, just the button they must click. Where is this button in relation to the page? \u274c At the same time, don't include so much in the screenshot that the reader isn't sure what you are trying to illustrate. Prefer code blocks to inline code. It's ok to use markdown's single back-tick syntax to highlight a single word like \"Notice the for statement below\". For any code samples, even if only one line, rather use three backticks and have the code on its own line and in its own section. \u274c Now run python3 app.py \u2705 Now run: ``` python3 app.py ```","title":"\ud83d\udcdd Welcome to the Ritza style guide"},{"location":"ritza%27s-writing-rules/Style/#welcome-to-the-ritza-style-guide","text":"This is our opinionated style guide, developed to help you produce work that is valuable and easy to understand.","title":"\ud83d\udcdd Welcome to the Ritza style guide"},{"location":"ritza%27s-writing-rules/Style/#goals-and-principles","text":"Our goal is always to teach . This often means helping our readers understand complicated technology, either conceptually or by example. Give your reader the exact information they need and include opportunities for them to learn more. To achieve our goal, our content is: Clear. Be sure you know what you\u2019re writing about. Keep words and sentences as simple as possible. Useful. Does the content deliver on the promise your headline made? Have you provided all the information the reader will need? Friendly. Don\u2019t underestimate or patronize your reader. Use informal language.","title":"Goals and principles"},{"location":"ritza%27s-writing-rules/Style/#voice-and-tone","text":"Voice and tone is not about what we say, but how we say it. We aim to be consistent, functional and clear. Here are some tips for how to achieve this:","title":"Voice and tone"},{"location":"ritza%27s-writing-rules/Style/#point-of-view","text":"Default to first person plural to include the reader in your \u201cteam\u201d. This means you and the reader are doing something together: \u2705 \"Next, we'll install the widget factory to create widgets efficiently.\" Sometimes it's more efficient to use the second person imperative and \"instruct\" the reader by telling them what needs to be done. This can be harsher but it's often less wordy, so use your judgement: \u26a0\ufe0f \"We can do this by using our package manager. We'll achieve this by typing sudo apt-install widget-factory \" \u2705 \"We can do this by using our package manager. Type sudo apt-install widget-factory \" It's ok to refer to the reader as 'you' in some cases, where the writer is clearly not involved, but in general, default to the 'we' voice wherever possible: \u26a0\ufe0f \"As you might remember from the previous tutorial , widget factories create widgets. In this tutorial...\" \u2705 \"In the previous tutorial, we saw how widget factories create widgets. In this tutorial...\"","title":"Point of view"},{"location":"ritza%27s-writing-rules/Style/#voice","text":"Default to active voice . This isn\u2019t a hard-and-fast rule. Active voice often makes it clearer who is doing what and sounds less stuffy. That said, sometimes passive is simply cleaner (often in cases where there isn't a specific subject) - use your judgement. \u26a0\ufe0f The command will be run by the shell. \u2705 Use the shell to run any commands.","title":"Voice"},{"location":"ritza%27s-writing-rules/Style/#things-to-avoid","text":"","title":"Things to avoid"},{"location":"ritza%27s-writing-rules/Style/#avoid-giving-the-reader-too-many-options","text":"Often, there are many ways to achieve the same task. Avoid giving the reader options wherever possible - the reader is looking to you for guidance, so be opinionated instead of comprehensive . \u274c \"You can use either the CLI or the GUI. If you prefer the CLI, then type the following command. If you prefer the GUI then click Foo -> Bar. \u2705 \"We recommend using the CLI. Type the following command\" If you really need to show multiple ways of achieiving the same thing, still emphasise the recommended one more than the other (e.g. include the alternative in a footnote or parentheses). It is OK to have a personal preference.","title":"Avoid giving the reader too many options"},{"location":"ritza%27s-writing-rules/Style/#avoid-getting-in-the-readers-way","text":"\u274c \"I wrote this guide after encountering difficulties with the software myself\" \u274c \"Next, I'm going to show you how to install a widget factory\"","title":"Avoid getting in the reader\u2019s way:"},{"location":"ritza%27s-writing-rules/Style/#avoid-marketing-speak","text":"Never try to sell something to the reader. Don't say a product makes things easy, that a design is beautiful, or use any text that you might find on a SaaS landing page.","title":"Avoid 'marketing' speak."},{"location":"ritza%27s-writing-rules/Style/#avoid-anything-you-might-find-in-an-encyclopaedia-or-academic-paper","text":"Your reader isn't interested in definitions - or if they are, they can easily find these elsewhere. If you're writing an article on NER, instead of starting with \u274c \"Named Entity Recognition (NER) is the task of categorising key words in a text as specific entities.\" Consider something more like \u2705 \"If you're analyzing a large amount of text, it's often useful to extract named entities from this - identifying people, places, dates and other entities.\" If you've ever tried to learn a new concept, you probably already know that reading a definition doesn't really clarify - but a more specific example does.","title":"Avoid anything you might find in an encyclopaedia or academic paper."},{"location":"ritza%27s-writing-rules/Style/#avoid-assuming-knowledge","text":"This can be tricky because, of course, you always have to assume some level of knowledge when writing technical content. However, we try to avoid assumptions about our reader's skill level. \u274c \"Referring back to the server code, it's obvious that we need both a success.html and a cancel.html.\" \u2705 \"Referring back to the server code, you may notice it requires both a success.html and a cancel.html.\"","title":"Avoid assuming knowledge."},{"location":"ritza%27s-writing-rules/Style/#avoid-guessing-out-loud-what-the-reader-wants","text":"It's tempting to start an article with \"Are you are a foo who likes to bar but sometimes finds baz?\", but this approach defines a narrow audience and you risk alienating anyone who is not a part of it.","title":"Avoid guessing out loud what the reader wants."},{"location":"ritza%27s-writing-rules/Style/#avoid-giving-extraneous-context","text":"It's tempting to give the reader related context or information, but your reader is here to achieve a specific goal. Leave out anything that doesn\u2019t help them achieve it. Instead of: \u274c Label Studio is an open source data labeling tool for labeling and exploring multiple types of data. Label Studio can be integrated with machine learning models to supply predictions for labels (pre-labels), or perform continuous active learning. You can use Label Studio for a variety of labelling and classification tasks for many different data formats but again we will just be focusing on its NER capabilities. Try something more concise: \u2705 We can use Label Studio for manually tagging Named Entities in our dataset. Install it now with pip install label-studio if you haven't already.","title":"Avoid giving extraneous context."},{"location":"ritza%27s-writing-rules/Style/#avoid-telling-the-reader-that-something-is-obvious-or-easy","text":"This discourages the reader who doesn\u2019t find it obvious or easy, and adds no value to the reader who does. Mostly, ~it's simple~ . You can ~easily~ ~just~ remove the offending words and the sentence keeps its meaning: \u274c Obviously, you can terminate the program at any time by hitting Ctrl+C \u2705 You can terminate the program at any time by hitting Ctrl+C Sometimes, you need to reword to avoid implying that something is simple: \u274c It's easy to add new widgets using Acme's tool. Click menu -> add widget . \u2705 To add a new widget using Acme's tool, click menu -> add widget .","title":"Avoid telling the reader that something is obvious or easy."},{"location":"ritza%27s-writing-rules/Style/#structure","text":"The structure of your article helps to present information in the clearest way. Here are some things to keep in mind regarding structure:","title":"Structure"},{"location":"ritza%27s-writing-rules/Style/#keep-structures-as-flat-as-possible","text":"Use heading 1 ( # in Markdown) for the title and heading 2 ( ## ) to break things down into logical sections. Heading 3 ( ### ) can be used where necessary for sub-sections, but in general, having a deeply nested structure makes things harder to follow, harder to edit, and harder to reuse. As a writer, your job is to take a complicated graph of interconnected ideas and break them down into a linear structure that can be read from start to end.","title":"Keep structures as flat as possible."},{"location":"ritza%27s-writing-rules/Style/#always-have-content-between-headings","text":"Don't have a subheading immediately below a heading without any text in between. Rather add a short sentence to introduce the section, or try to restructure to use fewer headings (also, don't use this as an excuse to add 'fluff' text that adds no value to the article).","title":"Always have content between headings"},{"location":"ritza%27s-writing-rules/Style/#avoid-nested-bullets","text":"Don't nest bullets into several levels. Rather restructure the content so that you can use separate bullet lists: \u274c You have several options for adding widgets From the menu by clicking on file -> add widget by clicking on help searching for add widget and hitting enter With a keyboard shortcut by pressing a and then w in command mode by pressing ctrl + a \u2705 You can add widgets from the menu by clicking on file -> add widget by clicking on help searching for add widget and hitting enter or with a keyboard shortcut by pressing a and then w in command mode by pressing ctrl + a","title":"Avoid nested bullets."},{"location":"ritza%27s-writing-rules/Style/#link-as-much-context-as-is-useful","text":"Choosing what text to link to an additional resource is more an art than a science. The main rule is that it should be as clear as possible to the reader what is being linked to, but keep it simple. \u274c \" You can follow the widget guide to learn more\" \u274c \"You can follow the widget guide to learn more\" \u2705 \"You can follow the widget guide to learn more\" The first example links too much unnecessary wording. In the second example, the link could be to a Wikipedia article explaining what a guide is. The third makes it clear that it is a link to the guide that was mentioned.","title":"Link as much context as is useful."},{"location":"ritza%27s-writing-rules/Style/#include-user-friendly-code-samples","text":"We want to tell the reader exactly what code needs to go where , and make it easy to repeat what we are doing. Avoid screenshots of code, and rather present code samples in text, between backtick gates with a language description.","title":"Include user-friendly code samples."},{"location":"ritza%27s-writing-rules/Style/#avoid-long-code-snippets","text":"Instead of giving an entire file to copy-paste, break down the code into several steps if possible.","title":"Avoid long code snippets."},{"location":"ritza%27s-writing-rules/Style/#provide-a-file-if-you-must","text":"If there's a lot of \u2018boilerplate\u2019 code, consider providing the file in a repl and instruct the reader to copy the whole thing as a starting point. However, it's preferable to avoid this if you can.","title":"Provide a file, if you must."},{"location":"ritza%27s-writing-rules/Style/#annotate-screenshots-and-use-context","text":"Screenshots are helpful tools for tutorials, but using them too often or without clarity may just make it harder for the reader to follow your instructions. \u2705 Use contextual screenshots to help readers navigate whichever platform you are directing them to. \u2705 Use a screenshot to demonstrate what your reader should be seeing if they correctly followed your instructions. \u2705 Make use of [1], [2], [3] annotations if several things need to be shown from a single shot. \u2705 Preferably take screenshots using a 4k/retina screen, or consider using a virtual high-res screen through Chrome dev tools as an alternative. \u2705 For Mac, use CleanShotX if possible \u274c Avoid screenshots of large amounts of text. Rather use a caption if you need to present text to your reader. \u274c Avoid screenshots that show too little; for example, just the button they must click. Where is this button in relation to the page? \u274c At the same time, don't include so much in the screenshot that the reader isn't sure what you are trying to illustrate.","title":"Annotate screenshots and use context."},{"location":"ritza%27s-writing-rules/Style/#prefer-code-blocks-to-inline-code","text":"It's ok to use markdown's single back-tick syntax to highlight a single word like \"Notice the for statement below\". For any code samples, even if only one line, rather use three backticks and have the code on its own line and in its own section. \u274c Now run python3 app.py \u2705 Now run: ``` python3 app.py ```","title":"Prefer code blocks to inline code."},{"location":"ritza%27s-writing-rules/common-writing-mistakes/","text":"Common mistakes tutorial writers make #1 They start with their own personal background. Sorry if it hurts your ego, but no one is looking for your tutorials to learn more about you. I'm a blah from blah and I do blah. I was doing blah because I needed blah and then blah happened and I got stuck. After blahing around for a while, I figured out blah and I thought I'd write down these steps in case they help anyone else\" Just skip it. People aren't here for your background any more than they are when googling for recipes. Overall, keep yourself out of the tutorial as much as possible - the reader should be the main character with you in the background helping out when required. #2 They include too much context In order to understand how to use this Python library, you should first understand what Python is. To understand Python, let me just teach you all of programming quick, but to understand that you need to know what a CPU is... Assume your reader had the same knowledge that you had before you learned the specific thing that the tutorial is about. Don't teach them the basics - they can go through a syllabus for that. #3 They include too little context And then just run the foobar command and everything will magically happen in the background. \"Wait what isn't that the opposite of the previous point?\" Yep, and it's the hardest part of tutorial writing. Predicting at which point your reader will get bored (and reigning in the context) and where they will stumble and fall (and providing just a little bit more). As a rule of thumb, never provide context that is two steps removed (context for the context for the subject matter), but it' a grey area and very hard to define. Practice makes perfect. #4 The tutorial is too short It's hard to say something meaningful in less than around 1500-2000 words. If you 'run out' of things to say at < 1000 words, it's likely that you need to either a) make the project a bit more complicated or b) explain some of the steps in more detail. #5 They provide information that is accurate but only useful if the reader already understands it Often once a writer has done enough research to understand a topic, they provide a very terse (correct) explanation, but one which they would initially have found confusing without the previous research. You should constantly be aware of and fight the 'curse of knowledge' - try to provide the resource that you would have wanted without your current knowledge.","title":"Common mistakes tutorial writers make"},{"location":"ritza%27s-writing-rules/common-writing-mistakes/#common-mistakes-tutorial-writers-make","text":"","title":"Common mistakes tutorial writers make"},{"location":"ritza%27s-writing-rules/common-writing-mistakes/#1-they-start-with-their-own-personal-background","text":"Sorry if it hurts your ego, but no one is looking for your tutorials to learn more about you. I'm a blah from blah and I do blah. I was doing blah because I needed blah and then blah happened and I got stuck. After blahing around for a while, I figured out blah and I thought I'd write down these steps in case they help anyone else\" Just skip it. People aren't here for your background any more than they are when googling for recipes. Overall, keep yourself out of the tutorial as much as possible - the reader should be the main character with you in the background helping out when required.","title":"#1 They start with their own personal background."},{"location":"ritza%27s-writing-rules/common-writing-mistakes/#2-they-include-too-much-context","text":"In order to understand how to use this Python library, you should first understand what Python is. To understand Python, let me just teach you all of programming quick, but to understand that you need to know what a CPU is... Assume your reader had the same knowledge that you had before you learned the specific thing that the tutorial is about. Don't teach them the basics - they can go through a syllabus for that.","title":"#2 They include too much context"},{"location":"ritza%27s-writing-rules/common-writing-mistakes/#3-they-include-too-little-context","text":"And then just run the foobar command and everything will magically happen in the background. \"Wait what isn't that the opposite of the previous point?\" Yep, and it's the hardest part of tutorial writing. Predicting at which point your reader will get bored (and reigning in the context) and where they will stumble and fall (and providing just a little bit more). As a rule of thumb, never provide context that is two steps removed (context for the context for the subject matter), but it' a grey area and very hard to define. Practice makes perfect.","title":"#3 They include too little context"},{"location":"ritza%27s-writing-rules/common-writing-mistakes/#4-the-tutorial-is-too-short","text":"It's hard to say something meaningful in less than around 1500-2000 words. If you 'run out' of things to say at < 1000 words, it's likely that you need to either a) make the project a bit more complicated or b) explain some of the steps in more detail.","title":"#4 The tutorial is too short"},{"location":"ritza%27s-writing-rules/common-writing-mistakes/#5-they-provide-information-that-is-accurate-but-only-useful-if-the-reader-already-understands-it","text":"Often once a writer has done enough research to understand a topic, they provide a very terse (correct) explanation, but one which they would initially have found confusing without the previous research. You should constantly be aware of and fight the 'curse of knowledge' - try to provide the resource that you would have wanted without your current knowledge.","title":"#5 They provide information that is accurate but only useful if the reader already understands it"},{"location":"ritza%27s-writing-rules/screenshots/","text":"Guidelines for creating screenshots in tutorials and documentation Include enough context but not too much Ensure that all text is legible Use a high quality, preferably 4k or Retina, monitor Optimize the image for size Don't add too many screenshots Captions and Alt-text Annotating screenshots Using videos or gifs Size considerations Software: Snagit vs CleanshotX vs ... Snagit CleanshotX","title":"Guidelines for creating screenshots in tutorials and documentation"},{"location":"ritza%27s-writing-rules/screenshots/#guidelines-for-creating-screenshots-in-tutorials-and-documentation","text":"","title":"Guidelines for creating screenshots in tutorials and documentation"},{"location":"ritza%27s-writing-rules/screenshots/#include-enough-context-but-not-too-much","text":"","title":"Include enough context but not too much"},{"location":"ritza%27s-writing-rules/screenshots/#ensure-that-all-text-is-legible","text":"","title":"Ensure that all text is legible"},{"location":"ritza%27s-writing-rules/screenshots/#use-a-high-quality-preferably-4k-or-retina-monitor","text":"","title":"Use a high quality, preferably 4k or Retina, monitor"},{"location":"ritza%27s-writing-rules/screenshots/#optimize-the-image-for-size","text":"","title":"Optimize the image for size"},{"location":"ritza%27s-writing-rules/screenshots/#dont-add-too-many-screenshots","text":"","title":"Don't add too many screenshots"},{"location":"ritza%27s-writing-rules/screenshots/#captions-and-alt-text","text":"","title":"Captions and Alt-text"},{"location":"ritza%27s-writing-rules/screenshots/#annotating-screenshots","text":"","title":"Annotating screenshots"},{"location":"ritza%27s-writing-rules/screenshots/#_1","text":"","title":""},{"location":"ritza%27s-writing-rules/screenshots/#using-videos-or-gifs","text":"Size considerations","title":"Using videos or gifs"},{"location":"ritza%27s-writing-rules/screenshots/#software-snagit-vs-cleanshotx-vs","text":"","title":"Software: Snagit vs CleanshotX vs ..."},{"location":"ritza%27s-writing-rules/screenshots/#snagit","text":"","title":"Snagit"},{"location":"ritza%27s-writing-rules/screenshots/#cleanshotx","text":"","title":"CleanshotX"}]}